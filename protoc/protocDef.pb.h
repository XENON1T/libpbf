// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocDef.proto

#ifndef PROTOBUF_protocDef_2eproto__INCLUDED
#define PROTOBUF_protocDef_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pbf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocDef_2eproto();
void protobuf_AssignDesc_protocDef_2eproto();
void protobuf_ShutdownFile_protocDef_2eproto();

class Event;
class Event_Channel;
class Event_Channel_Data;

// ===================================================================

class Event_Channel_Data : public ::google::protobuf::Message {
 public:
  Event_Channel_Data();
  virtual ~Event_Channel_Data();

  Event_Channel_Data(const Event_Channel_Data& from);

  inline Event_Channel_Data& operator=(const Event_Channel_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Channel_Data& default_instance();

  void Swap(Event_Channel_Data* other);

  // implements Message ----------------------------------------------

  Event_Channel_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Channel_Data& from);
  void MergeFrom(const Event_Channel_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes payload = 1;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 1;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // optional int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pbf.Event.Channel.Data)
 private:
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* payload_;
  ::google::protobuf::int64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protocDef_2eproto();
  friend void protobuf_AssignDesc_protocDef_2eproto();
  friend void protobuf_ShutdownFile_protocDef_2eproto();

  void InitAsDefaultInstance();
  static Event_Channel_Data* default_instance_;
};
// -------------------------------------------------------------------

class Event_Channel : public ::google::protobuf::Message {
 public:
  Event_Channel();
  virtual ~Event_Channel();

  Event_Channel(const Event_Channel& from);

  inline Event_Channel& operator=(const Event_Channel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Channel& default_instance();

  void Swap(Event_Channel* other);

  // implements Message ----------------------------------------------

  Event_Channel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Channel& from);
  void MergeFrom(const Event_Channel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Event_Channel_Data Data;

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 module = 3;
  inline bool has_module() const;
  inline void clear_module();
  static const int kModuleFieldNumber = 3;
  inline ::google::protobuf::int32 module() const;
  inline void set_module(::google::protobuf::int32 value);

  // repeated .pbf.Event.Channel.Data data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::pbf::Event_Channel_Data& data(int index) const;
  inline ::pbf::Event_Channel_Data* mutable_data(int index);
  inline ::pbf::Event_Channel_Data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::pbf::Event_Channel_Data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::pbf::Event_Channel_Data >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:pbf.Event.Channel)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_module();
  inline void clear_has_module();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 module_;
  ::google::protobuf::RepeatedPtrField< ::pbf::Event_Channel_Data > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocDef_2eproto();
  friend void protobuf_AssignDesc_protocDef_2eproto();
  friend void protobuf_ShutdownFile_protocDef_2eproto();

  void InitAsDefaultInstance();
  static Event_Channel* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Event_Channel Channel;

  // accessors -------------------------------------------------------

  // required int64 number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline ::google::protobuf::int64 number() const;
  inline void set_number(::google::protobuf::int64 value);

  // required uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // repeated .pbf.Event.Channel channel = 3;
  inline int channel_size() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline const ::pbf::Event_Channel& channel(int index) const;
  inline ::pbf::Event_Channel* mutable_channel(int index);
  inline ::pbf::Event_Channel* add_channel();
  inline const ::google::protobuf::RepeatedPtrField< ::pbf::Event_Channel >&
      channel() const;
  inline ::google::protobuf::RepeatedPtrField< ::pbf::Event_Channel >*
      mutable_channel();

  // @@protoc_insertion_point(class_scope:pbf.Event)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 number_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::RepeatedPtrField< ::pbf::Event_Channel > channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protocDef_2eproto();
  friend void protobuf_AssignDesc_protocDef_2eproto();
  friend void protobuf_ShutdownFile_protocDef_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// ===================================================================


// ===================================================================

// Event_Channel_Data

// required bytes payload = 1;
inline bool Event_Channel_Data::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Channel_Data::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Channel_Data::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Channel_Data::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& Event_Channel_Data::payload() const {
  return *payload_;
}
inline void Event_Channel_Data::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Event_Channel_Data::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Event_Channel_Data::set_payload(const void* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Channel_Data::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* Event_Channel_Data::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event_Channel_Data::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 time = 2;
inline bool Event_Channel_Data::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Channel_Data::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Channel_Data::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Channel_Data::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 Event_Channel_Data::time() const {
  return time_;
}
inline void Event_Channel_Data::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// Event_Channel

// required int32 id = 1;
inline bool Event_Channel::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Channel::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Channel::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Channel::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Event_Channel::id() const {
  return id_;
}
inline void Event_Channel::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 module = 3;
inline bool Event_Channel::has_module() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Channel::set_has_module() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Channel::clear_has_module() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Channel::clear_module() {
  module_ = 0;
  clear_has_module();
}
inline ::google::protobuf::int32 Event_Channel::module() const {
  return module_;
}
inline void Event_Channel::set_module(::google::protobuf::int32 value) {
  set_has_module();
  module_ = value;
}

// repeated .pbf.Event.Channel.Data data = 2;
inline int Event_Channel::data_size() const {
  return data_.size();
}
inline void Event_Channel::clear_data() {
  data_.Clear();
}
inline const ::pbf::Event_Channel_Data& Event_Channel::data(int index) const {
  return data_.Get(index);
}
inline ::pbf::Event_Channel_Data* Event_Channel::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::pbf::Event_Channel_Data* Event_Channel::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pbf::Event_Channel_Data >&
Event_Channel::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::pbf::Event_Channel_Data >*
Event_Channel::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// Event

// required int64 number = 1;
inline bool Event::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_number() {
  number_ = GOOGLE_LONGLONG(0);
  clear_has_number();
}
inline ::google::protobuf::int64 Event::number() const {
  return number_;
}
inline void Event::set_number(::google::protobuf::int64 value) {
  set_has_number();
  number_ = value;
}

// required uint64 time = 2;
inline bool Event::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Event::time() const {
  return time_;
}
inline void Event::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// repeated .pbf.Event.Channel channel = 3;
inline int Event::channel_size() const {
  return channel_.size();
}
inline void Event::clear_channel() {
  channel_.Clear();
}
inline const ::pbf::Event_Channel& Event::channel(int index) const {
  return channel_.Get(index);
}
inline ::pbf::Event_Channel* Event::mutable_channel(int index) {
  return channel_.Mutable(index);
}
inline ::pbf::Event_Channel* Event::add_channel() {
  return channel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pbf::Event_Channel >&
Event::channel() const {
  return channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::pbf::Event_Channel >*
Event::mutable_channel() {
  return &channel_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocDef_2eproto__INCLUDED
